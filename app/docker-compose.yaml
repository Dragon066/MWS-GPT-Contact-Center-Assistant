services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
      - crm
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - network

  frontend:
    build: ./frontend
    restart: always
    ports:
      - "8001:8001"
    depends_on:
      - backend
    networks:
      - network

  backend:
    build: ./backend
    restart: always
    ports:
      - "8002:8002"
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - network

  crm:
    build: ./crm
    restart: always
    ports:
      - "8003:8003"
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - network

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    # ports:
    #   - "6000:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    networks:
      - network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ${POSTGRES_DB}"]
      interval: 3s
      timeout: 5s
      retries: 10

volumes:
  pgdata:

networks:
  network:
    driver: bridge
services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
      - crm
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - network

  frontend:
    build: ./frontend
    restart: always
    ports:
      - "8001:8001"
    depends_on:
      - backend
    networks:
      - network

  backend:
    build: ./backend
    restart: always
    ports:
      - "8002:8002"
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      LLM_API_KEY: ${LLM_API_KEY}
      LLM_BASE_URL: ${LLM_BASE_URL}
      LLM_EMBEDDING_MODEL: ${LLM_EMBEDDING_MODEL}
      LLM_EMBEDDING_VECTOR_SIZE: ${LLM_EMBEDDING_VECTOR_SIZE}
      LLM_KNOWLEDGE_AGENT: ${LLM_KNOWLEDGE_AGENT}
      LLM_SUMMARY_AGENT: ${LLM_SUMMARY_AGENT}
      LLM_ACTION_AGENT: ${LLM_ACTION_AGENT}
      LLM_ASSISTANT_AGENT: ${LLM_ASSISTANT_AGENT}
      LLM_EMOTION_AGENT: ${LLM_EMOTION_AGENT}
      LLM_QUALITY_AGENT: ${LLM_QUALITY_AGENT}
      LLM_RESOLUTION_AGENT: ${LLM_RESOLUTION_AGENT}
      VERBOSE_MODELS_AGENTS: ${VERBOSE_MODELS_AGENTS}
      VERBOSE_MODELS_CHAINS: ${VERBOSE_MODELS_CHAINS}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - network

  crm:
    build: ./crm
    restart: always
    ports:
      - "8003:8003"
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - network

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    networks:
      - network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ${POSTGRES_DB}"]
      interval: 3s
      timeout: 5s
      retries: 10

  qdrant:
    image: qdrant/qdrant:v1.13.6
    restart: always
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrantdata:/qdrant/storage
    networks:
      - network

volumes:
  pgdata:
  qdrantdata:

networks:
  network:
    driver: bridge